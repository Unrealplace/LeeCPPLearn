//
//  Student.cpp
//  C++Demo
//
//  Created by MacBook on 2017/5/3.
//  Copyright © 2017年 Oliver. All rights reserved.
//

#include <stdio.h>
#include <iostream>
using namespace std;

class Student{

public:
    int age;
    char * name;
    float score;
    void sleep(){
        
        std::cout <<"sleep:::age:"<<age<<"score"<<score<<endl;
    }
    void say();

};
// 这段代码在类体中定义了成员函数。也可以只在类体中声明函数，而将函数定义放在类体外面，如下图所示：
//在类体中直接定义函数时，不需要在函数名前面加上类名，因为函数属于哪一个类是不言而喻的。
//
//但当成员函数定义在类外时，就必须在函数名前面加上类名予以限定。::被称为域解析符（也称作用域运算符或作用域限定符），用来连接类名和函数名，指明当前函数属于哪个类。
//
//成员函数必须先在类体中作原型声明，然后在类外定义，也就是说类体的位置应在函数定义之前
inline void Student::say(){

    std::cout <<"age:"<<age<<"score"<<score<<endl;
    
}

//inline 成员函数
//在类体中和类体外定义成员函数是有区别的：在类体中定义的成员函数会自动成为内联函数，在类体外定义的不会。当然，在类体内部定义的函数也可以加 inline 关键字，但这是多余的，因为类体内部定义的函数默认就是内联函数。
//
//内联函数一般不是我们所期望的，它会将函数调用处用函数体替代，所以我建议在类体内部对成员函数作声明，而在类体外部进行定义，这是一种良好的编程习惯，实际开发中大家也是这样做的。
//
//当然，如果你的函数比较短小，希望定义为内联函数，那也没有什么不妥的。
//
//如果你既希望将函数定义在类体外部，又希望它是内联函数，那么可以在定义函数时加 inline 关键字。当然你也可以在函数声明处加 inline，不过这样做没有效果，编译器会忽略函数声明处的 inline，我们已在《如何规范地使用C++内联函数》中对这点进行了详细讲解。

//再次强调，虽然 C++ 支持将内联函数定义在类的外部，但我强烈建议将函数定义在类的内部，这样它会自动成为内联函数，何必费力不讨好地将它定义在类的外部呢，这样并没有任何优势。

